{
    var _ns_ = {
            id: 'wisp.sequence',
            doc: void 0
        };
    var wisp_runtime = require('./runtime');
    var isNil = wisp_runtime.isNil;
    var isVector = wisp_runtime.isVector;
    var isFn = wisp_runtime.isFn;
    var isNumber = wisp_runtime.isNumber;
    var isString = wisp_runtime.isString;
    var isDictionary = wisp_runtime.isDictionary;
    var isSet = wisp_runtime.isSet;
    var keyValues = wisp_runtime.keyValues;
    var str = wisp_runtime.str;
    var int = wisp_runtime.int;
    var dec = wisp_runtime.dec;
    var inc = wisp_runtime.inc;
    var min = wisp_runtime.min;
    var merge = wisp_runtime.merge;
    var dictionary = wisp_runtime.dictionary;
    var get = wisp_runtime.get;
    var isIterable = wisp_runtime.isIterable;
    var isEqual = wisp_runtime.isEqual;
    var complement = wisp_runtime.complement;
    var identity = wisp_runtime.identity;
    var isList = wisp_runtime.isList;
    var isLazySeq = wisp_runtime.isLazySeq;
    var isIdentitySet = wisp_runtime.isIdentitySet;
}
var _wispTypes = isEqual._wispTypes;
var listIterator = function listIterator() {
    return function () {
        var selfø1 = this;
        return {
            'next': function () {
                return isEmpty(selfø1) ? { 'done': true } : function () {
                    var xø1 = first(selfø1);
                    selfø1 = rest(selfø1);
                    return { 'value': xø1 };
                }.call(this);
            }
        };
    }.call(this);
};
var seqToString = function seqToString(lparen, rparen) {
    return function () {
        return function loop() {
            var recur = loop;
            var listø1 = this;
            var resultø1 = '';
            do {
                recur = isEmpty(listø1) ? '' + lparen + resultø1.substr(1) + rparen : (loop[0] = rest(listø1), loop[1] = '' + resultø1 + ' ' + function () {
                    var xø1 = first(listø1);
                    return isVector(xø1) ? '' + '[' + xø1.join(' ') + ']' : isNil(xø1) ? 'nil' : isString(xø1) ? JSON.stringify(xø1) : isNumber(xø1) ? JSON.stringify(xø1) : 'else' ? xø1 : void 0;
                }.call(this), loop);
            } while (listø1 = loop[0], resultø1 = loop[1], recur === loop);
            return recur;
        }.call(this);
    };
};
var List = function List(head, tail) {
    this.head = head;
    this.tail = tail || list();
    this.length = isNil(this.tail) || isDictionary(this.tail) || isNumber(this.tail.length) ? inc(count(this.tail)) : void 0;
    return this;
};
List.prototype.length = 0;
List.type = (_wispTypes || 0)['list'];
List.prototype.type = List.type;
List.prototype.tail = Object.create(List.prototype);
List.prototype.toString = seqToString('(', ')');
List.prototype[Symbol.iterator] = listIterator;
var lazySeqValue = function lazySeqValue(lazySeq) {
    return lazySeq.realized ? lazySeq.x : function () {
        var xø1 = lazySeq.x();
        lazySeq.realized = true;
        isEmpty(xø1) ? lazySeq.length = 0 : void 0;
        return lazySeq.x = xø1;
    }.call(this);
};
var LazySeq = function LazySeq(realized, x) {
    this.realized = realized || false;
    this.x = x;
    return this;
};
LazySeq.type = (_wispTypes || 0)['lazy-seq'];
LazySeq.prototype.type = LazySeq.type;
LazySeq.prototype[Symbol.iterator] = listIterator;
var lazySeq = exports.lazySeq = function lazySeq(realized, body) {
        return new LazySeq(realized, body);
    };
var cloneProtoProps = function cloneProtoProps(from, to) {
    return Object.assign.apply(void 0, [to].concat(Object.getOwnPropertyNames(from.__proto__).map(function ($1) {
        return function () {
            var xø1 = from[$1];
            return dictionary($1, isFn(xø1) ? xø1.bind(from) : xø1);
        }.call(this);
    })));
};
var identitySet = exports.identitySet = function identitySet() {
        var items = Array.prototype.slice.call(arguments, 0);
        return function () {
            var jsSetø1 = new Set(items);
            var fø1 = function ($1, $2) {
                return get.apply(void 0, [
                    jsSetø1,
                    $1,
                    $2
                ]);
            };
            cloneProtoProps(jsSetø1, fø1);
            fø1.toString = seqToString('#{', '}');
            fø1.__proto__ = jsSetø1;
            Object.defineProperty(fø1, 'length', { 'value': fø1.size });
            fø1[Symbol.iterator] = fø1.values;
            fø1['type'] = identitySet.type;
            return fø1;
        }.call(this);
    };
identitySet.type = (_wispTypes || 0)['set'];
var set = exports.set = identitySet;
var isLazySeq = exports.isLazySeq = isLazySeq;
var isIdentitySet = exports.isIdentitySet = isIdentitySet;
var isList = exports.isList = isList;
isEqual._seqEqual = function (x, y) {
    return (isVector(x) || isSeq(x)) && (isVector(y) || isSeq(y)) && function loop() {
        var recur = loop;
        var xø2 = seq(x);
        var yø2 = seq(y);
        do {
            recur = isVector(xø2) && isVector(yø2) ? isEqual(count(xø2), count(yø2)) && xø2.every(function ($1, $2) {
                return isEqual($1, yø2[$2]);
            }) : isEmpty(xø2) || isEmpty(yø2) ? isEmpty(xø2) && isEmpty(yø2) : !isEqual(first(xø2), first(yø2)) ? false : 'else' ? (loop[0] = rest(xø2), loop[1] = rest(yø2), loop) : void 0;
        } while (xø2 = loop[0], yø2 = loop[1], recur === loop);
        return recur;
    }.call(this);
};
var list = exports.list = function list() {
        return arguments.length === 0 ? Object.create(List.prototype) : Array.prototype.slice.call(arguments).reduceRight(function (tail, head) {
            return cons(head, tail);
        }, list());
    };
var cons = exports.cons = function cons(head, tail) {
        return new List(head, tail);
    };
var isSequential = exports.isSequential = function isSequential(x) {
        return isSeq(x) || isVector(x) || isDictionary(x) || isSet(x) || isString(x);
    };
var isNative = function isNative(sequence) {
    return isVector(sequence) || isString(sequence) || isDictionary(sequence);
};
var reverse = exports.reverse = function reverse(sequence) {
        return isVector(sequence) ? vec(sequence).reverse() : into(void 0, sequence);
    };
var range = exports.range = function range() {
        switch (arguments.length) {
        case 1:
            var end = arguments[0];
            return range(0, end, 1);
        case 2:
            var start = arguments[0];
            var end = arguments[1];
            return range(start, end, 1);
        case 3:
            var start = arguments[0];
            var end = arguments[1];
            var step = arguments[2];
            return step < 0 ? range(0 - start, 0 - end, 0 - step).map(function ($1) {
                return 0 - $1;
            }) : Array.from({ 'length': (end + step - start - 1) / step }, function (_, i) {
                return start + i * step;
            });
        default:
            throw RangeError('Wrong number of arguments passed');
        }
    };
var mapv = exports.mapv = function mapv(f) {
        var sequences = Array.prototype.slice.call(arguments, 1);
        return function () {
            var vectorsø1 = sequences.map(vec);
            var nø1 = min.apply(void 0, vectorsø1.map(count));
            return range(nø1).map(function (i) {
                return f.apply(void 0, vectorsø1.map(function ($1) {
                    return $1[i];
                }));
            });
        }.call(this);
    };
var map = exports.map = function map(f) {
        var sequences = Array.prototype.slice.call(arguments, 1);
        return function () {
            var resultø1 = mapv.apply(void 0, [f].concat(sequences));
            return isNative(first(sequences)) ? resultø1 : list.apply(void 0, resultø1);
        }.call(this);
    };
var mapIndexed = exports.mapIndexed = function mapIndexed(f) {
        var sequences = Array.prototype.slice.call(arguments, 1);
        return function () {
            var sequenceø1 = first(sequences);
            var nø1 = count(sequenceø1);
            var indicesø1 = range(nø1);
            return map.apply(void 0, [
                f,
                isNative(sequenceø1) ? indicesø1 : list.apply(void 0, indicesø1)
            ].concat(sequences));
        }.call(this);
    };
var filter = exports.filter = function filter(isF, sequence) {
        return isNil(sequence) ? list() : isSeq(sequence) ? filterList(isF, sequence) : isVector(sequence) ? sequence.filter(function ($1) {
            return isF($1);
        }) : 'else' ? filter(isF, seq(sequence)) : void 0;
    };
var filterList = function filterList(isF, sequence) {
    return function loop() {
        var recur = loop;
        var resultø1 = list();
        var itemsø1 = sequence;
        do {
            recur = isEmpty(itemsø1) ? reverse(resultø1) : (loop[0] = isF(first(itemsø1)) ? cons(first(itemsø1), resultø1) : resultø1, loop[1] = rest(itemsø1), loop);
        } while (resultø1 = loop[0], itemsø1 = loop[1], recur === loop);
        return recur;
    }.call(this);
};
var filterv = exports.filterv = function filterv(isF, sequence) {
        return vec(filter(isF, sequence));
    };
var reduce = exports.reduce = function reduce(f) {
        var params = Array.prototype.slice.call(arguments, 1);
        return function () {
            var hasInitialø1 = count(params) >= 2;
            var initialø1 = hasInitialø1 ? first(params) : void 0;
            var sequenceø1 = hasInitialø1 ? second(params) : first(params);
            return hasInitialø1 ? vec(sequenceø1).reduce(f, initialø1) : vec(sequenceø1).reduce(f);
        }.call(this);
    };
var count = exports.count = function count(sequence) {
        return sequence && isNumber(sequence.length) ? sequence.length : function () {
            var itø1 = seq(sequence);
            return isNil(itø1) ? 0 : isLazySeq(itø1) ? count(vec(itø1)) : 'else' ? itø1.length : void 0;
        }.call(this);
    };
var isEmpty = exports.isEmpty = function isEmpty(sequence) {
        return function () {
            var itø1 = seq(sequence);
            return 0 === (!isLazySeq(itø1) ? count(itø1) : (function () {
                first(itø1);
                return itø1.length;
            })());
        }.call(this);
    };
var first = exports.first = function first(sequence) {
        return isNil(sequence) ? void 0 : isList(sequence) ? sequence.head : isVector(sequence) || isString(sequence) ? (sequence || 0)[0] : isLazySeq(sequence) ? first(lazySeqValue(sequence)) : 'else' ? first(seq(sequence)) : void 0;
    };
var second = exports.second = function second(sequence) {
        return isNil(sequence) ? void 0 : isList(sequence) ? first(rest(sequence)) : isVector(sequence) || isString(sequence) ? (sequence || 0)[1] : isLazySeq(sequence) ? second(lazySeqValue(sequence)) : 'else' ? first(rest(seq(sequence))) : void 0;
    };
var third = exports.third = function third(sequence) {
        return isNil(sequence) ? void 0 : isList(sequence) ? first(rest(rest(sequence))) : isVector(sequence) || isString(sequence) ? (sequence || 0)[2] : isLazySeq(sequence) ? third(lazySeqValue(sequence)) : 'else' ? second(rest(seq(sequence))) : void 0;
    };
var rest = exports.rest = function rest(sequence) {
        return isNil(sequence) ? list() : isList(sequence) ? sequence.tail : isVector(sequence) || isString(sequence) ? sequence.slice(1) : isLazySeq(sequence) ? rest(lazySeqValue(sequence)) : 'else' ? rest(seq(sequence)) : void 0;
    };
var lastOfList = function lastOfList(list) {
    return function loop() {
        var recur = loop;
        var itemø1 = first(list);
        var itemsø1 = rest(list);
        do {
            recur = isEmpty(itemsø1) ? itemø1 : (loop[0] = first(itemsø1), loop[1] = rest(itemsø1), loop);
        } while (itemø1 = loop[0], itemsø1 = loop[1], recur === loop);
        return recur;
    }.call(this);
};
var last = exports.last = function last(sequence) {
        return isVector(sequence) || isString(sequence) ? (sequence || 0)[dec(count(sequence))] : isList(sequence) ? lastOfList(sequence) : isNil(sequence) ? void 0 : isLazySeq(sequence) ? last(lazySeqValue(sequence)) : 'else' ? last(seq(sequence)) : void 0;
    };
var butlast = exports.butlast = function butlast(sequence) {
        return function () {
            var itemsø1 = isNil(sequence) ? void 0 : isString(sequence) ? subs(sequence, 0, dec(count(sequence))) : isVector(sequence) ? sequence.slice(0, dec(count(sequence))) : isList(sequence) ? list.apply(void 0, butlast(vec(sequence))) : isLazySeq(sequence) ? butlast(lazySeqValue(sequence)) : 'else' ? butlast(seq(sequence)) : void 0;
            return !isEmpty(itemsø1) ? itemsø1 : void 0;
        }.call(this);
    };
var take = exports.take = function take(n, sequence) {
        return isNil(sequence) ? list() : isVector(sequence) ? takeFromVector(n, sequence) : isList(sequence) ? takeFromList(n, sequence) : isLazySeq(sequence) ? n > 0 ? take(n, lazySeqValue(sequence)) : void 0 : 'else' ? take(n, seq(sequence)) : void 0;
    };
var takeWhile = exports.takeWhile = function takeWhile(predicate, sequence) {
        return function loop() {
            var recur = loop;
            var itemsø1 = sequence;
            var resultø1 = [];
            do {
                recur = function () {
                    var headø1 = first(itemsø1);
                    var tailø1 = rest(itemsø1);
                    return !isEmpty(itemsø1) && predicate(headø1) ? (loop[0] = tailø1, loop[1] = conj(resultø1, headø1), loop) : isNative(sequence) ? resultø1 : list.apply(void 0, resultø1);
                }.call(this);
            } while (itemsø1 = loop[0], resultø1 = loop[1], recur === loop);
            return recur;
        }.call(this);
    };
var takeFromVector = function takeFromVector(n, vector) {
    return vector.slice(0, n);
};
var takeFromList = function takeFromList(n, sequence) {
    return function loop() {
        var recur = loop;
        var takenø1 = list();
        var itemsø1 = sequence;
        var nø2 = int(n) || 0;
        do {
            recur = nø2 <= 0 || isEmpty(itemsø1) ? reverse(takenø1) : (loop[0] = cons(first(itemsø1), takenø1), loop[1] = rest(itemsø1), loop[2] = dec(nø2), loop);
        } while (takenø1 = loop[0], itemsø1 = loop[1], nø2 = loop[2], recur === loop);
        return recur;
    }.call(this);
};
var dropFromList = function dropFromList(n, sequence) {
    return function loop() {
        var recur = loop;
        var leftø1 = n;
        var itemsø1 = sequence;
        do {
            recur = leftø1 < 1 || isEmpty(itemsø1) ? itemsø1 : (loop[0] = dec(leftø1), loop[1] = rest(itemsø1), loop);
        } while (leftø1 = loop[0], itemsø1 = loop[1], recur === loop);
        return recur;
    }.call(this);
};
var drop = exports.drop = function drop(n, sequence) {
        return n <= 0 ? sequence : isString(sequence) ? sequence.substr(n) : isVector(sequence) ? sequence.slice(n) : isList(sequence) ? dropFromList(n, sequence) : isNil(sequence) ? list() : isLazySeq(sequence) ? drop(n, lazySeqValue(sequence)) : 'else' ? drop(n, seq(sequence)) : void 0;
    };
var dropWhile = exports.dropWhile = function dropWhile(predicate, sequence) {
        return function loop() {
            var recur = loop;
            var itemsø1 = seq(sequence);
            do {
                recur = isEmpty(itemsø1) || !predicate(first(itemsø1)) ? itemsø1 : (loop[0] = rest(itemsø1), loop);
            } while (itemsø1 = loop[0], recur === loop);
            return recur;
        }.call(this);
    };
var conjList = function conjList(sequence, items) {
    return reduce(function (result, item) {
        return cons(item, result);
    }, sequence, items);
};
var ensureDictionary = function ensureDictionary(x) {
    return !isVector(x) ? x : dictionary(first(x), second(x));
};
var conj = exports.conj = function conj(sequence) {
        var items = Array.prototype.slice.call(arguments, 1);
        return isVector(sequence) ? sequence.concat(items) : isString(sequence) ? '' + sequence + str.apply(void 0, items) : isNil(sequence) ? list.apply(void 0, reverse(items)) : isSeq(sequence) ? conjList(sequence, items) : isDictionary(sequence) ? merge(sequence, merge.apply(void 0, mapv(ensureDictionary, items))) : isSet(sequence) ? identitySet.apply(void 0, into(vec(sequence), items)) : 'else' ? (function () {
            throw TypeError('' + 'Type can\'t be conjoined ' + sequence);
        })() : void 0;
    };
var disj = exports.disj = function disj(coll) {
        var ks = Array.prototype.slice.call(arguments, 1);
        return function () {
            var predicateø1 = complement(identitySet.apply(void 0, ks));
            return isEmpty(ks) ? coll : isSet(coll) ? identitySet.apply(void 0, filterv(predicateø1, coll)) : isDictionary(coll) ? into({}, filter(function ($1) {
                return predicateø1(first($1));
            }, coll)) : 'else' ? (function () {
                throw TypeError('' + 'Type can\'t be disjoined ' + coll);
            })() : void 0;
        }.call(this);
    };
var into = exports.into = function into(to, from) {
        return conj.apply(void 0, [to].concat(vec(from)));
    };
var zipmap = exports.zipmap = function zipmap(keys, vals) {
        return into({}, map(vector, keys, vals));
    };
var assoc = exports.assoc = function assoc(source) {
        var keyValues = Array.prototype.slice.call(arguments, 1);
        return conj(source, dictionary.apply(void 0, keyValues));
    };
var dissoc = exports.dissoc = function dissoc(coll) {
        var ks = Array.prototype.slice.call(arguments, 1);
        return isDictionary(coll) ? disj.apply(void 0, [coll].concat(ks)) : (function () {
            throw TypeError('' + 'Can only dissoc on dictionaries');
        })();
    };
var concat = exports.concat = function concat() {
        var sequences = Array.prototype.slice.call(arguments, 0);
        return reduce(function ($1, $2) {
            return conjList($1, reverse($2));
        }, function () {
            var tailø1 = last(sequences);
            return isLazySeq(tailø1) ? tailø1 : list.apply(void 0, vec(tailø1));
        }.call(this), rest(reverse(sequences)));
    };
var mapcat = exports.mapcat = function mapcat(f) {
        var colls = Array.prototype.slice.call(arguments, 1);
        return concat.apply(void 0, mapv.apply(void 0, [f].concat(colls)));
    };
var empty = exports.empty = function empty(sequence) {
        return isList(sequence) ? list() : isVector(sequence) ? [] : isString(sequence) ? '' : isDictionary(sequence) ? {} : isSet(sequence) ? set() : isLazySeq(sequence) ? lazySeq.call(void 0, false, function () {
            return void 0;
        }) : void 0;
    };
var seq = exports.seq = function seq(sequence) {
        return isNil(sequence) ? void 0 : isVector(sequence) || isSeq(sequence) ? sequence : isString(sequence) ? Array.prototype.slice.call(sequence) : isDictionary(sequence) ? keyValues(sequence) : isIterable(sequence) ? iteratorToLseq((sequence || 0)[Symbol.iterator]()) : 'default' ? (function () {
            throw TypeError('' + 'Can not seq ' + sequence);
        })() : void 0;
    };
var seq_ = exports.seq_ = function seq_(sequence) {
        return function () {
            var itø1 = seq(sequence);
            return !isEmpty(itø1) ? itø1 : void 0;
        }.call(this);
    };
var isSeq = exports.isSeq = function isSeq(sequence) {
        return isList(sequence) || isLazySeq(sequence);
    };
var iteratorToLseq = function iteratorToLseq(iterator) {
    return unfold(function ($1) {
        return function () {
            var xø1 = $1.next();
            return !xø1.done ? [
                xø1.value,
                $1
            ] : void 0;
        }.call(this);
    }, iterator);
};
var vec = exports.vec = function vec(sequence) {
        return isNil(sequence) ? [] : isVector(sequence) || isList(sequence) ? Array.from(sequence) : isLazySeq(sequence) ? function () {
            var xsø1 = Array.from(sequence);
            sequence.length = xsø1.length;
            return xsø1;
        }.call(this) : 'else' ? vec(seq(sequence)) : void 0;
    };
var vector = exports.vector = function vector() {
        var sequence = Array.prototype.slice.call(arguments, 0);
        return sequence;
    };
var sortComparator = isEqual([
        1,
        2,
        3
    ], [
        2,
        1,
        3
    ].sort(function (a, b) {
        return a < b ? 0 : 1;
    })) ? function ($1) {
        return function (a, b) {
            return $1(b, a) ? 1 : 0;
        };
    } : function ($1) {
        return function (a, b) {
            return $1(a, b) ? -1 : 0;
        };
    };
var sort = exports.sort = function sort(f, items) {
        return function () {
            var hasComparatorø1 = isFn(f);
            var itemsø2 = !hasComparatorø1 && isNil(items) ? f : items;
            var compareø1 = hasComparatorø1 ? sortComparator(f) : void 0;
            var resultø1 = vec(itemsø2).sort(compareø1);
            return isNil(itemsø2) ? list() : isVector(itemsø2) ? resultø1 : 'else' ? list.apply(void 0, resultø1) : void 0;
        }.call(this);
    };
var repeatedly = exports.repeatedly = function repeatedly(n, f) {
        return Array.from({ 'length': n }, f);
    };
var repeat = exports.repeat = function repeat(n, x) {
        return repeatedly(n, function () {
            return x;
        });
    };
var isEvery = exports.isEvery = function isEvery(predicate, sequence) {
        return vec(sequence).every(function ($1) {
            return predicate($1);
        });
    };
var some = exports.some = function some(pred, coll) {
        return function loop() {
            var recur = loop;
            var itemsø1 = seq(coll);
            do {
                recur = !isEmpty(itemsø1) ? pred(first(itemsø1)) || (loop[0] = rest(itemsø1), loop) : void 0;
            } while (itemsø1 = loop[0], recur === loop);
            return recur;
        }.call(this);
    };
var partition = exports.partition = function partition() {
        switch (arguments.length) {
        case 2:
            var n = arguments[0];
            var coll = arguments[1];
            return partition(n, n, coll);
        case 3:
            var n = arguments[0];
            var step = arguments[1];
            var coll = arguments[2];
            return partition(n, step, [], coll);
        case 4:
            var n = arguments[0];
            var step = arguments[1];
            var pad = arguments[2];
            var coll = arguments[3];
            return function loop() {
                var recur = loop;
                var resultø1 = [];
                var itemsø1 = seq(coll);
                do {
                    recur = function () {
                        var chunkø1 = take(n, itemsø1);
                        var sizeø1 = count(chunkø1);
                        return sizeø1 === n ? (loop[0] = conj(resultø1, chunkø1), loop[1] = drop(step, itemsø1), loop) : 0 === sizeø1 ? resultø1 : n > sizeø1 + count(pad) ? resultø1 : 'else' ? conj(resultø1, take(n, vec(concat(chunkø1, pad)))) : void 0;
                    }.call(this);
                } while (resultø1 = loop[0], itemsø1 = loop[1], recur === loop);
                return recur;
            }.call(this);
        default:
            throw RangeError('Wrong number of arguments passed');
        }
    };
var interleave = exports.interleave = function interleave() {
        var sequences = Array.prototype.slice.call(arguments, 0);
        return isEmpty(sequences) ? [] : function loop() {
            var recur = loop;
            var resultø1 = [];
            var sequencesø2 = sequences;
            do {
                recur = some(isEmpty, sequencesø2) ? vec(resultø1) : (loop[0] = concat(resultø1, map(first, sequencesø2)), loop[1] = map(rest, sequencesø2), loop);
            } while (resultø1 = loop[0], sequencesø2 = loop[1], recur === loop);
            return recur;
        }.call(this);
    };
var nth = exports.nth = function nth(sequence, index, notFound) {
        return function () {
            var sequenceø2 = seq_(sequence);
            return isNil(sequenceø2) ? notFound : isSeq(sequenceø2) ? function () {
                var ifLetBinding1ø1 = seq_(drop(index, sequenceø2));
                return ifLetBinding1ø1 ? function () {
                    var itø1 = ifLetBinding1ø1;
                    return first(itø1);
                }.call(this) : notFound;
            }.call(this) : isVector(sequenceø2) || isString(sequenceø2) ? index < count(sequenceø2) ? sequenceø2[index] : notFound : 'else' ? (function () {
                throw TypeError('Unsupported type');
            })() : void 0;
        }.call(this);
    };
var isContains = exports.isContains = function isContains(coll, v) {
        return isSet(coll) ? coll.has(v) : isDictionary(coll) || isVector(coll) || isString(coll) ? coll.hasOwnProperty(v) : 'else' ? false : void 0;
    };
var union = exports.union = function union() {
        var sets = Array.prototype.slice.call(arguments, 0);
        return into(set(), concat.apply(void 0, sets));
    };
var difference = exports.difference = function difference(s1) {
        var sets = Array.prototype.slice.call(arguments, 1);
        return into(set(), filter(complement(union.apply(void 0, sets)), s1));
    };
var intersection = exports.intersection = function intersection() {
        var sets = Array.prototype.slice.call(arguments, 0);
        return function () {
            var setsø2 = mapv(function ($1) {
                    return into(set(), $1);
                }, sets);
            var isInEachø1 = function (x) {
                return isEvery(function ($1) {
                    return $1.has(x);
                }, setsø2);
            };
            var minSizeø1 = min.apply(void 0, mapv(count, setsø2));
            var smallestø1 = setsø2.find(function ($1) {
                    return isEqual(minSizeø1, count($1));
                });
            return into(set(), filter(isInEachø1, smallestø1));
        }.call(this);
    };
var isSubset = exports.isSubset = function isSubset(set1, set2) {
        return isSet(set2) ? isEvery(function ($1) {
            return set2.has($1);
        }, set1) : isSubset(set1, into(set(), set2));
    };
var isSuperset = exports.isSuperset = function isSuperset(set1, set2) {
        return isSubset(set2, set1);
    };
var unfold = exports.unfold = function unfold(f, x) {
        return lazySeq.call(void 0, false, function () {
            return function () {
                var ifLetBinding2ø1 = f(x);
                return ifLetBinding2ø1 ? function () {
                    var nextø1 = ifLetBinding2ø1;
                    return cons(first(nextø1), unfold(f, second(nextø1)));
                }.call(this) : void 0;
            }.call(this);
        });
    };
var iterate = exports.iterate = function iterate(f, x) {
        return lazySeq.call(void 0, false, function () {
            return cons(x, iterate(f, f(x)));
        });
    };
var cycle = exports.cycle = function cycle(coll) {
        return lazySeq.call(void 0, false, function () {
            return !isEmpty(coll) ? concat(coll, cycle(coll)) : void 0;
        });
    };
var infiniteRange = exports.infiniteRange = function infiniteRange() {
        switch (arguments.length) {
        case 0:
            return infiniteRange(0);
        case 1:
            var n = arguments[0];
            return iterate(inc, n);
        case 2:
            var n = arguments[0];
            var step = arguments[1];
            return iterate(function ($1) {
                return $1 + step;
            }, n);
        default:
            throw RangeError('Wrong number of arguments passed');
        }
    };
var lazyMap = exports.lazyMap = function lazyMap(f) {
        var sequences = Array.prototype.slice.call(arguments, 1);
        return unfold(function ($1) {
            return !some(isEmpty, $1) ? [
                f.apply(void 0, mapv(first, $1)),
                mapv(rest, $1)
            ] : void 0;
        }, sequences);
    };
var lazyFilter = exports.lazyFilter = function lazyFilter(f, sequence) {
        return unfold(function ($1) {
            return function loop() {
                var recur = loop;
                var xsø1 = $1;
                do {
                    recur = isEmpty(xsø1) ? void 0 : f(first(xsø1)) ? [
                        first(xsø1),
                        rest(xsø1)
                    ] : 'else' ? (loop[0] = rest(xsø1), loop) : void 0;
                } while (xsø1 = loop[0], recur === loop);
                return recur;
            }.call(this);
        }, seq(sequence));
    };
var lazyConcat = exports.lazyConcat = function lazyConcat() {
        var sequences = Array.prototype.slice.call(arguments, 0);
        return !isEmpty(sequences) ? function iter(xs) {
            return lazySeq.call(void 0, false, function () {
                return isEmpty(xs) ? lazyConcat.apply(void 0, rest(sequences)) : cons(first(xs), iter(rest(xs)));
            });
        }(seq(first(sequences))) : void 0;
    };
var lazyPartition = exports.lazyPartition = function lazyPartition() {
        switch (arguments.length) {
        case 2:
            var n = arguments[0];
            var coll = arguments[1];
            return lazyPartition(n, n, coll);
        case 3:
            var n = arguments[0];
            var step = arguments[1];
            var coll = arguments[2];
            return lazyPartition(n, step, [], coll);
        case 4:
            var n = arguments[0];
            var step = arguments[1];
            var pad = arguments[2];
            var coll = arguments[3];
            return unfold(function ($1) {
                return function () {
                    var chunkø1 = take(n, concat(take(n, $1), pad));
                    return !isEmpty($1) && n === count(chunkø1) ? [
                        chunkø1,
                        drop(step, $1)
                    ] : void 0;
                }.call(this);
            }, coll);
        default:
            throw RangeError('Wrong number of arguments passed');
        }
    };
var run = exports.run = function run(proc, coll) {
        return reduce(function (_, x) {
            proc(x);
            return void 0;
        }, void 0, coll);
    };
var dorun = exports.dorun = function dorun() {
        switch (arguments.length) {
        case 1:
            var coll = arguments[0];
            return dorun(Infinity, coll);
        case 2:
            var n = arguments[0];
            var coll = arguments[1];
            return run(identity, take(n, coll));
        default:
            throw RangeError('Wrong number of arguments passed');
        }
    };
var doall = exports.doall = function doall() {
        switch (arguments.length) {
        case 1:
            var coll = arguments[0];
            return doall(Infinity, coll);
        case 2:
            var n = arguments[0];
            var coll = arguments[1];
            dorun(n, coll);
            return coll;
        default:
            throw RangeError('Wrong number of arguments passed');
        }
    };
//# sourceMappingURL=data:application/json;base64,
