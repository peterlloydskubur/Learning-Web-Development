{
    var _ns_ = {
            id: 'wisp.string',
            doc: void 0
        };
    var wisp_runtime = require('./runtime');
    var isFn = wisp_runtime.isFn;
    var str = wisp_runtime.str;
    var subs = wisp_runtime.subs;
    var reMatches = wisp_runtime.reMatches;
    var isNil = wisp_runtime.isNil;
    var isString = wisp_runtime.isString;
    var isRePattern = wisp_runtime.isRePattern;
    var dec = wisp_runtime.dec;
    var max = wisp_runtime.max;
    var wisp_sequence = require('./sequence');
    var seq = wisp_sequence.seq;
    var lazySeq = wisp_sequence.lazySeq;
    var vec = wisp_sequence.vec;
    var conj = wisp_sequence.conj;
    var cons = wisp_sequence.cons;
    var first = wisp_sequence.first;
    var rest = wisp_sequence.rest;
    var take = wisp_sequence.take;
    var count = wisp_sequence.count;
    var isEmpty = wisp_sequence.isEmpty;
}
var reFindAll = exports.reFindAll = isFn(''.matchAll) ? function reFindAll(re, s) {
        return seq(s.matchAll(RegExp(re, 'g')));
    } : function reFindAll(re, s) {
        return function rec(suffix, prefix) {
            return function () {
                var xø1 = suffix.match(re);
                return xø1 ? function () {
                    var posø1 = xø1.index + max(1, count(first(xø1)));
                    Object.assign(xø1, {
                        'input': s,
                        'index': prefix + xø1.index
                    });
                    return isEmpty(suffix) ? lazySeq.call(void 0, false, function () {
                        return [xø1];
                    }) : lazySeq.call(void 0, false, function () {
                        return cons(xø1, rec(subs(suffix, posø1), prefix + posø1));
                    });
                }.call(this) : void 0;
            }.call(this);
        }(s, 0);
    };
var clojureSplit = function clojureSplit(string, pattern, limit) {
    return function loop() {
        var recur = loop;
        var matchesø1 = take(dec(limit), reFindAll(pattern, string));
        var resø1 = [];
        var indexø1 = 0;
        do {
            recur = isEmpty(matchesø1) ? conj(resø1, subs(string, indexø1)) : function () {
                var xø1 = first(matchesø1);
                return loop[0] = rest(matchesø1), loop[1] = conj(resø1, subs(string, indexø1, xø1.index)), loop[2] = xø1.index + count(first(xø1)), loop;
            }.call(this);
        } while (matchesø1 = loop[0], resø1 = loop[1], indexø1 = loop[2], recur === loop);
        return recur;
    }.call(this);
};
var split = exports.split = function split(string, pattern, limit) {
        return !limit ? string.split(pattern) : clojureSplit(string, pattern, limit > 0 ? limit : Infinity);
    };
var splitLines = exports.splitLines = function splitLines(s) {
        return split(s, /\n|\r\n/);
    };
var join = exports.join = function join() {
        switch (arguments.length) {
        case 1:
            var coll = arguments[0];
            return str.apply(void 0, vec(coll));
        case 2:
            var separator = arguments[0];
            var coll = arguments[1];
            return vec(coll).join(separator);
        default:
            throw RangeError('Wrong number of arguments passed');
        }
    };
var upperCase = exports.upperCase = function upperCase(string) {
        return string.toUpperCase();
    };
var lowerCase = exports.lowerCase = function lowerCase(string) {
        return string.toLowerCase();
    };
var capitalize = exports.capitalize = function capitalize(s) {
        return count(s) < 2 ? upperCase(s) : '' + upperCase(subs(s, 0, 1)) + lowerCase(subs(s, 1));
    };
var ESCAPE_PATTERN = new RegExp('([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])', 'g');
var patternEscape = exports.patternEscape = function patternEscape(source) {
        return source.replace(ESCAPE_PATTERN, '\\$1').replace(new RegExp('\\x08', 'g'), '\\x08');
    };
var replaceFirst = exports.replaceFirst = function replaceFirst(string, match, replacement) {
        return string.replace(match, replacement);
    };
var replace = exports.replace = function replace(string, match, replacement) {
        return isString(match) ? string.replace(new RegExp(patternEscape(match), 'g'), replacement) : isRePattern(match) ? string.replace(new RegExp(match.source, 'g'), replacement) : 'else' ? (function () {
            throw '' + 'Invalid match arg: ' + match;
        })() : void 0;
    };
var __LEFTSPACES__ = exports.__LEFTSPACES__ = /^\s\s*/;
var __RIGHTSPACES__ = exports.__RIGHTSPACES__ = /\s\s*$/;
var __SPACES__ = exports.__SPACES__ = /^\s\s*$/;
var triml = exports.triml = isNil(''.trimLeft) ? function (string) {
        return string.replace(__LEFTSPACES__, '');
    } : function (string) {
        return string.trimLeft();
    };
var trimr = exports.trimr = isNil(''.trimRight) ? function (string) {
        return string.replace(__RIGHTSPACES__, '');
    } : function (string) {
        return string.trimRight();
    };
var trim = exports.trim = isNil(''.trim) ? function (string) {
        return string.replace(__LEFTSPACES__).replace(__RIGHTSPACES__);
    } : function (string) {
        return string.trim();
    };
var isBlank = exports.isBlank = function isBlank(string) {
        return isNil(string) || isEmpty(string) || reMatches(__SPACES__, string);
    };
var reverse = exports.reverse = function reverse(string) {
        return join('', string.split(/(?:)/).reverse());
    };
//# sourceMappingURL=data:application/json;base64,
