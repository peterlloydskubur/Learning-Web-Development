{
    var _ns_ = {
            id: 'wisp.wisp',
            doc: 'Wisp program that reads wisp code from stdin and prints\n  compiled javascript code into stdout'
        };
    var fs = require('fs');
    var createReadStream = fs.createReadStream;
    var path = require('path');
    var basename = path.basename;
    var dirname = path.dirname;
    var join = path.join;
    var resolve = path.resolve;
    var module = require('module');
    var Module = module.Module;
    var commander = require('commander');
    var wisp_package = require('./package');
    var version = wisp_package.version;
    var wisp_string = require('./string');
    var split = wisp_string.split;
    var join = wisp_string.join;
    var upperCase = wisp_string.upperCase;
    var replace = wisp_string.replace;
    var wisp_sequence = require('./sequence');
    var first = wisp_sequence.first;
    var second = wisp_sequence.second;
    var last = wisp_sequence.last;
    var count = wisp_sequence.count;
    var reduce = wisp_sequence.reduce;
    var rest = wisp_sequence.rest;
    var conj = wisp_sequence.conj;
    var partition = wisp_sequence.partition;
    var assoc = wisp_sequence.assoc;
    var drop = wisp_sequence.drop;
    var isEmpty = wisp_sequence.isEmpty;
    var wisp_repl = require('./repl');
    var startRepl = wisp_repl.start;
    var wisp_engine_node = require('./engine/node');
    var wisp_runtime = require('./runtime');
    var str = wisp_runtime.str;
    var subs = wisp_runtime.subs;
    var isEqual = wisp_runtime.isEqual;
    var isNil = wisp_runtime.isNil;
    var wisp_ast = require('./ast');
    var prStr = wisp_ast.prStr;
    var name = wisp_ast.name;
    var wisp_compiler = require('./compiler');
    var compile = wisp_compiler.compile;
}
var compileStdin = exports.compileStdin = function compileStdin(options) {
        return withStreamContent(process.stdin, compileString, conj({}, options));
    };
var compileFile = exports.compileFile = function compileFile(path, options) {
        return withStreamContent(createReadStream(path), compileString, conj({ 'source-uri': path }, options));
    };
var compileString = exports.compileString = function compileString(source, options) {
        return function () {
            var channelø1 = (options || 0)['print'] || 'code';
            var outputø1 = compile(source, options);
            var contentø1 = isEqual(channelø1, 'code') ? (outputø1 || 0)['code'] : isEqual(channelø1, 'expansion') ? (outputø1 || 0)['expansion'] : 'else' ? JSON.stringify((outputø1 || 0)[channelø1], 2, 2) : void 0;
            process.stdout.write(contentø1 || 'nil');
            return (outputø1 || 0)['error'] ? (function () {
                throw outputø1.error;
            })() : void 0;
        }.call(this);
    };
var withStreamContent = exports.withStreamContent = function withStreamContent(input, resume, options) {
        return function () {
            var contentø1 = '';
            input.setEncoding('utf8');
            input.resume();
            input.on('data', function ($1) {
                return contentø1 = '' + contentø1 + $1;
            });
            return input.once('end', function () {
                return resume(contentø1, options);
            });
        }.call(this);
    };
var run = exports.run = function run(path) {
        return Module._load(resolve(path), null, true);
    };
void 0;
var parseParams = exports.parseParams = function parseParams(params) {
        return function () {
            var optionsø1 = commander.version(version).usage('[options] <file ...>').option('-r, --run', 'compile and execute the file (same as wisp path/to/file.wisp)').option('-c, --compile', 'compile given file and prints to stdout').option('-i, --interactive', 'run an interactive wisp REPL (same as wisp with no params)').option('--print <format>', 'use custom print output `expansion`,`forms`, `ast`, `js-ast` or (default) `code`', function (x, _) {
                    return '' + x;
                }, 'code').option('--no-map', 'disable source map generation').option('--source-uri <uri>', 'uri input will be associated with in source maps').option('--output-uri <uri>', 'uri output will be associated with in source maps').parse(params);
            return conj({ 'no-map': !(optionsø1 || 0)['map'] }, optionsø1);
        }.call(this);
    };
var main = exports.main = function main() {
        return function () {
            var optionsø1 = parseParams(process.argv);
            var pathø1 = optionsø1.args[0];
            return optionsø1.run ? run(pathø1) : !process.stdin.isTTY ? compileStdin(optionsø1) : optionsø1.interactive ? startRepl() : optionsø1.compile ? compileFile(pathø1, optionsø1) : pathø1 ? run(pathø1) : 'else' ? startRepl() : void 0;
        }.call(this);
    };
//# sourceMappingURL=data:application/json;base64,
