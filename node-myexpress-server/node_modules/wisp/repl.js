{
    var _ns_ = {
            id: 'wisp.repl',
            doc: void 0
        };
    var repl = require('repl');
    var repl = repl;
    var vm = require('vm');
    var vm = vm;
    var wisp_runtime = require('./runtime');
    var subs = wisp_runtime.subs;
    var isEqual = wisp_runtime.isEqual;
    var keys = wisp_runtime.keys;
    var wisp_sequence = require('./sequence');
    var count = wisp_sequence.count;
    var list = wisp_sequence.list;
    var conj = wisp_sequence.conj;
    var cons = wisp_sequence.cons;
    var vec = wisp_sequence.vec;
    var last = wisp_sequence.last;
    var wisp_compiler = require('./compiler');
    var compile = wisp_compiler.compile;
    var readForms = wisp_compiler.readForms;
    var analyzeForms = wisp_compiler.analyzeForms;
    var generate = wisp_compiler.generate;
    var wisp_ast = require('./ast');
    var prStr = wisp_ast.prStr;
    var base64Encode = require('base64-encode');
    var btoa = base64Encode;
}
var evaluateCode = exports.evaluateCode = function evaluateCode(source, uri, context) {
        return function () {
            var sourceUriø1 = '' + 'data:application/wisp;charset=utf-8;base64,' + btoa(source);
            var formsø1 = readForms(source, sourceUriø1);
            var nodesø1 = (formsø1 || 0)['forms'] ? analyzeForms((formsø1 || 0)['forms']) : void 0;
            var inputø1 = (nodesø1 || 0)['ast'] ? (function () {
                    try {
                        return generate.apply(void 0, vec(cons({ 'source-uri': sourceUriø1 }, (nodesø1 || 0)['ast'])));
                    } catch (error) {
                        return { 'error': error };
                    }
                })() : void 0;
            var outputø1 = (inputø1 || 0)['code'] ? (function () {
                    try {
                        return { 'value': vm.runInContext((inputø1 || 0)['code'], context, uri) };
                    } catch (error) {
                        return { 'error': error };
                    }
                })() : void 0;
            var resultø1 = conj(formsø1, nodesø1, inputø1, outputø1, { 'error': (outputø1 || 0)['error'] || (inputø1 || 0)['error'] || (nodesø1 || 0)['error'] || (formsø1 || 0)['error'] });
            context._3 = context._2;
            context._2 = context._1;
            return context._1 = resultø1;
        }.call(this);
    };
var evaluate = exports.evaluate = function () {
        var inputø1 = void 0;
        var outputø1 = void 0;
        return function evaluate(code, context, file, callback) {
            return !(inputø1 === code) ? (function () {
                inputø1 = !(last(code) === '\n') ? subs(code, 0, count(code) - 1) : code;
                outputø1 = evaluateCode(inputø1, file, context);
                return callback((outputø1 || 0)['error'], (outputø1 || 0)['value']);
            })() : callback((outputø1 || 0)['error']);
        };
    }.call(this);
var start = exports.start = function start() {
        return function () {
            var sessionø1 = repl.start({
                    'writer': prStr,
                    'prompt': '=> ',
                    'ignoreUndefined': true,
                    'useGlobal': false,
                    'eval': evaluate
                });
            var contextø1 = sessionø1.context;
            [
                'runtime',
                'sequence',
                'string'
            ].map(function (n) {
                return function () {
                    var fø1 = require('' + './src/' + n + '.wisp');
                    return keys(fø1).map(function (k) {
                        return (contextø1 || 0)[k] = (fø1 || 0)[k];
                    });
                }.call(this);
            });
            contextø1.exports = {};
            return sessionø1;
        }.call(this);
    };
//# sourceMappingURL=data:application/json;base64,
