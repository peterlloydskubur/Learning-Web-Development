{
    var _ns_ = {
            id: 'runner.main',
            doc: void 0
        };
    var wisp_compiler = require('wisp/compiler');
    var compile = wisp_compiler.compile;
}
var _wisp_runtime = exports._wisp_runtime = require('../runtime.js');
var _wisp_sequence = exports._wisp_sequence = require('../sequence.js');
var _wisp_string = exports._wisp_string = require('../string.js');
var fetchSource = exports.fetchSource = function fetchSource(src, callback) {
        return function () {
            var xhrø1 = new XMLHttpRequest();
            xhrø1.open('GET', src, true);
            xhrø1.addEventListener('load', function (ev) {
                return xhrø1.status >= 200 && xhrø1.status < 300 ? callback(xhrø1.responseText) : console.error(xhrø1.statusText);
            }, false);
            xhrø1.overrideMimeType ? xhrø1.overrideMimeType('text/plain') : void 0;
            xhrø1.setRequestHeader('If-Modified-Since', 'Fri, 01 Jan 1960 00:00:00 GMT');
            return xhrø1.send(null);
        }.call(this);
    };
var runWispCode = exports.runWispCode = function runWispCode(code, url) {
        return function () {
            var resultø1 = compile(code, { 'source-uri': url || 'inline' });
            var errorø1 = (resultø1 || 0)['error'];
            return errorø1 ? console.error(errorø1) : Function(eval((resultø1 || 0)['code']))();
        }.call(this);
    };
var fetchAndRunWispCode = exports.fetchAndRunWispCode = function fetchAndRunWispCode(url) {
        return fetchSource(url, function (code) {
            return runWispCode(code, url);
        });
    };
var __main__ = exports.__main__ = function __main__(ev) {
        [
            _wisp_string,
            _wisp_sequence,
            _wisp_runtime
        ].forEach(function (f) {
            return Object.keys(f).forEach(function ($1) {
                return (window || 0)[$1] = (f || 0)[$1];
            });
        });
        return function () {
            var scriptsø1 = document.getElementsByTagName('script');
            return function loop() {
                var recur = loop;
                var xø1 = 0;
                do {
                    recur = xø1 < scriptsø1.length ? function () {
                        var scriptø1 = (scriptsø1 || 0)[xø1];
                        var sourceø1 = scriptø1.src;
                        var contentø1 = scriptø1.text;
                        var contentTypeø1 = scriptø1.type;
                        contentTypeø1 == 'application/wisp' ? (function () {
                            sourceø1 ? fetchAndRunWispCode(sourceø1) : void 0;
                            return contentø1 ? runWispCode(contentø1, sourceø1) : void 0;
                        })() : void 0;
                        return loop[0] = xø1 + 1, loop;
                    }.call(this) : void 0;
                } while (xø1 = loop[0], recur === loop);
                return recur;
            }.call(this);
        }.call(this);
    };
window.addEventListener('load', __main__, false);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbIl9uc18iLCJpZCIsImRvYyIsImNvbXBpbGUiLCJfd2lzcF9ydW50aW1lIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJfd2lzcF9zZXF1ZW5jZSIsIl93aXNwX3N0cmluZyIsImZldGNoU291cmNlIiwic3JjIiwiY2FsbGJhY2siLCJ4aHLDuDEiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJhZGRFdmVudExpc3RlbmVyIiwiZXYiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGF0dXNUZXh0Iiwib3ZlcnJpZGVNaW1lVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwibnVsbCIsInJ1bldpc3BDb2RlIiwiY29kZSIsInVybCIsInJlc3VsdMO4MSIsImVycm9yw7gxIiwiRnVuY3Rpb24iLCJldmFsIiwiZmV0Y2hBbmRSdW5XaXNwQ29kZSIsIl9fbWFpbl9fIiwiZm9yRWFjaCIsImYiLCJPYmplY3QiLCJrZXlzIiwiJDEiLCJ3aW5kb3ciLCJzY3JpcHRzw7gxIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInjDuDEiLCJsZW5ndGgiLCJzY3JpcHTDuDEiLCJzb3VyY2XDuDEiLCJjb250ZW50w7gxIiwidGV4dCIsImNvbnRlbnRUeXBlw7gxIiwidHlwZSJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUNBLEksR0FBRDtBQUFBLFlBQUFDLEUsRUFBSSxhQUFKO0FBQUEsWUFBQUMsRyxFQUFBLEssQ0FBQTtBQUFBLFU7O1FBQ21DQyxPQUFBLEcsY0FBQUEsTzs7QUFFbkMsSUFBS0MsYUFBQSxHQUFBQyxPQUFBLENBQUFELGFBQUEsR0FBZUUsT0FBRCxDQUFTLGVBQVQsQ0FBbkIsQztBQUNBLElBQUtDLGNBQUEsR0FBQUYsT0FBQSxDQUFBRSxjQUFBLEdBQWdCRCxPQUFELENBQVMsZ0JBQVQsQ0FBcEIsQztBQUNBLElBQUtFLFlBQUEsR0FBQUgsT0FBQSxDQUFBRyxZ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QUFHLFEsR0FBY0QsUUFBUCxDQUFHcEMsR0FBVixDQURBO0FBQUEsd0JBRUEsSUFBQXNDLFMsR0FBZ0JGLFFBQVIsQ0FBR0csSUFBWCxDQUZBO0FBQUEsd0JBR0EsSUFBQUMsYSxHQUFxQkosUUFBUixDQUFHSyxJQUFoQixDQUhBO0FBQUEsd0JBUUlELGFBQUosSUFBaUIsa0JBQXJCLEcsYUFFSTtBQUFBLDRCQUFJSCxRQUFKLEdBQ0dkLG1CQUFELENBQXlCYyxRQUF6QixDQURGLEcsTUFBQTtBQUFBLDRCQUVBLE9BQUlDLFNBQUosR0FDR3RCLFdBQUQsQ0FBZXNCLFNBQWYsRUFBdUJELFFBQXZCLENBREYsRyxNQUFBLENBRkE7QUFBQSx5QixDQUFBLEVBRkosRyxNQUFBLENBUkk7QUFBQSx3QkFjSixPLFVBQVVILEdBQUgsR0FBSyxDQUFaLEUsSUFBQSxDQWRJO0FBQUEscUIsS0FBTixDLElBQUEsQ0FERixHO3lCQUZLQSxHOztrQkFBUCxDLElBQUEsRUFESTtBQUFBLFMsS0FBTixDLElBQUEsRUFOQTtBQUFBLEtBRkYsQztBQTRCbUJKLE1BQWxCLENBQUN6QixnQkFBRixDQUEwQixNQUExQixFQUFpQ21CLFFBQWpDLEUsS0FBQSIsInNvdXJjZXNDb250ZW50IjpbIihucyBydW5uZXIubWFpblxuICAoOnJlcXVpcmUgW3dpc3AuY29tcGlsZXIgOnJlZmVyIFtjb21waWxlXV0pKVxuXG4oZGVmIF93aXNwX3J1bnRpbWUgKHJlcXVpcmUgXCIuLi9ydW50aW1lLmpzXCIpKVxuKGRlZiBfd2lzcF9zZXF1ZW5jZSAocmVxdWlyZSBcIi4uL3NlcXVlbmNlLmpzXCIpKVxuKGRlZiBfd2lzcF9zdHJpbmcgKHJlcXVpcmUgXCIuLi9zdHJpbmcuanNcIikpXG5cbihkZWZuIGZldGNoLXNvdXJjZSBbc3JjIGNhbGxiYWNrXVxuICAobGV0IFt4aHIgKG5ldyBYTUxIdHRwUmVxdWVzdCldXG4gICAgOyguYWRkRXZlbnRMaXN0ZW5lciB4aHIgXCJ0aW1lb3V0XCIgKGZuIFtldl0gKGNvbnNvbGUubG9nIFwiVGltZW91dCBsb2FkaW5nXCIgc3JjKSkgZmFsc2UpXG4gICAgKC5vcGVuIHhociBcIkdFVFwiIHNyYyB0cnVlKVxuICAgICguYWRkRXZlbnRMaXN0ZW5lciB4aHIgXCJsb2FkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgKGZuIFtldl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgKGFuZCAoPj0geGhyLnN0YXR1cyAyMDApICg8IHhoci5zdGF0dXMgMzAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChjYWxsYmFjayB4aHIucmVzcG9uc2VUZXh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnNvbGUuZXJyb3IgeGhyLnN0YXR1c1RleHQpKSkgZmFsc2UpXG4gICAgOyhzZXQhICguLXRpbWVvdXQgeGhyKSAzMClcbiAgICAoaWYgeGhyLm92ZXJyaWRlTWltZVR5cGVcbiAgICAgICh4aHIub3ZlcnJpZGVNaW1lVHlwZSBcInRleHQvcGxhaW5cIikpXG4gICAgKHhoci5zZXRSZXF1ZXN0SGVhZGVyIFwiSWYtTW9kaWZpZWQtU2luY2VcIiBcIkZyaSwgMDEgSmFuIDE5NjAgMDA6MDA6MDAgR01UXCIpXG4gICAgKC5zZW5kIHhociBudWxsKSkpXG5cbihkZWZuIHJ1bi13aXNwLWNvZGUgW2NvZGUgdXJsXVxuICAobGV0IFtyZXN1bHQgKGNvbXBpbGUgY29kZSB7OnNvdXJjZS11cmkgKG9yIHVybCBcImlubGluZVwiKX0pXG4gICAgICAgIGVycm9yICg6ZXJyb3IgcmVzdWx0KV1cbiAgICAoaWYgZXJyb3JcbiAgICAgIChjb25zb2xlLmVycm9yIGVycm9yKVxuICAgICAgKChGdW5jdGlvbiAoZXZhbCAoOmNvZGUgcmVzdWx0KSkpKSkpKVxuXG4oZGVmbiBmZXRjaC1hbmQtcnVuLXdpc3AtY29kZSBbdXJsXVxuICAoZmV0Y2gtc291cmNlIHVybFxuICAgICAgICAgICAgICAgIChmbiBbY29kZV1cbiAgICAgICAgICAgICAgICAgIChydW4td2lzcC1jb2RlIGNvZGUgdXJsKSkpKVxuXG4oZGVmbiBfX21haW5fXyBbZXZdXG4gIDsgaG9pc3Qgd2lzcCBidWlsdGlucyBpbnRvIHRoZSBnbG9iYWwgd2luZG93IGNvbnRleHRcbiAgKC5mb3JFYWNoIFtfd2lzcF9zdHJpbmcgX3dpc3Bfc2VxdWVuY2UgX3dpc3BfcnVudGltZV1cbiAgICAgICAgICAgIChmbiBbZl1cbiAgICAgICAgICAgICAgKC5mb3JFYWNoICgua2V5cyBPYmplY3QgZilcbiAgICAgICAgICAgICAgICAgICAgICAgICMoc2V0ISAoZ2V0IHdpbmRvdyAlKSAoZ2V0IGYgJSkpKSkpXG4gIDsoY29uc29sZS5sb2cgXCJydW5uaW5nIF9fbWFpbl9fXCIpXG4gIDsgZmluZCBhbGwgdGhlIHNjcmlwdCB0YWdzIG9uIHRoZSBwYWdlXG4gIChsZXQgW3NjcmlwdHMgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lIFwic2NyaXB0XCIpXVxuICAgIChsb29wIFt4IDBdXG4gICAgICA7IGxvb3AgdGhyb3VnaCBldmVyeSBzY3JpcHQgdGFnXG4gICAgICAoaWYgKDwgeCBzY3JpcHRzLmxlbmd0aClcbiAgICAgICAgKGxldCBbc2NyaXB0IChnZXQgc2NyaXB0cyB4KVxuICAgICAgICAgICAgICBzb3VyY2UgKC4tc3JjIHNjcmlwdClcbiAgICAgICAgICAgICAgY29udGVudCAoLi10ZXh0IHNjcmlwdClcbiAgICAgICAgICAgICAgY29udGVudC10eXBlICguLXR5cGUgc2NyaXB0KV1cbiAgICAgICAgICA7KGNvbnNvbGUubG9nIFwic3JjOlwiICguLXNyYyBzY3JpcHQpKVxuICAgICAgICAgIDsoY29uc29sZS5sb2cgXCJ0eXBlOlwiICguLXR5cGUgc2NyaXB0KSlcbiAgICAgICAgICA7KGNvbnNvbGUubG9nIFwiY29udGVudDpcIiAoLi10ZXh0IHNjcmlwdCkpXG4gICAgICAgICAgOyBpZiB0aGUgc2NyaXB0IHRhZyBoYXMgYXBwbGljYXRpb24vd2lzcCBhcyB0aGUgdHlwZSB0aGVuIHJ1biBpdFxuICAgICAgICAgIChpZiAoPT0gY29udGVudC10eXBlIFwiYXBwbGljYXRpb24vd2lzcFwiKVxuICAgICAgICAgICAgKGRvXG4gICAgICAgICAgICAgIChpZiBzb3VyY2VcbiAgICAgICAgICAgICAgICAoZmV0Y2gtYW5kLXJ1bi13aXNwLWNvZGUgc291cmNlKSlcbiAgICAgICAgICAgICAgKGlmIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAocnVuLXdpc3AtY29kZSBjb250ZW50IHNvdXJjZSkpKSlcbiAgICAgICAgICAocmVjdXIgKCsgeCAxKSkpKSkpKVxuXG4oLmFkZEV2ZW50TGlzdGVuZXIgd2luZG93IFwibG9hZFwiIF9fbWFpbl9fIGZhbHNlKVxuIl19
